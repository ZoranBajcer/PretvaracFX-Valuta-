package pretvaracValuta;

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.ResourceBundle;
import org.json.JSONArray;
import org.json.JSONException;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.Button;
import javafx.scene.control.ComboBox;
import javafx.scene.control.Label;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;

public class PretvaracController implements Initializable {

	@FXML
	private ComboBox<String> comboOne;
	@FXML
	private ComboBox<String> comboTwo;
	@FXML
	private Button refresh;
	@FXML
	private Button button;
	@FXML
	private TextField textField;
	@FXML
	private Label status;
	@FXML
	private Label connection;
	@FXML
	private TextArea lista;
	private String inputLine;
	private String valuta;
	private String textValue;
	private String buttonLabel;
	private String formated;
	private URLconnection uc;
	private double jedinica;
	private double jedinica1;
	private double jedinica2;
	private double vrijednost;
	private double doubleValue;
	private double sum;
	private double finishSum;
	private boolean connectionOK;
	private JSONArray arr;
	private HttpURLConnection conn;
	private HashMap<String, Double> valuteKV = new HashMap<String, Double>();
	private HashMap<String, Double> jediniceKV = new HashMap<String, Double>();
	private StringBuilder response = null;
	private Button clickedButton;
	private DecimalFormat df;
	private FileInputStream fis;
	private ObjectInputStream ois;
	private InputStreamReader sr;
	private BufferedReader in;
	private FileOutputStream fos;
	private ObjectOutputStream oos;
	private SimpleDateFormat formatter; 
	private Date date;
	private String time;
	
	public void initialize(URL url, ResourceBundle rb) {
		try {
			setup(connection());
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public StringBuilder connection() throws IOException {
		uc = new URLconnection();
		conn = uc.urlConnect();
		if (conn != null) {
			connectionOK = true;
			try {
				sr = new InputStreamReader(conn.getInputStream());
				in = new BufferedReader(sr);
				response = new StringBuilder();
				while ((inputLine = in.readLine()) != null) {
					response.append(inputLine); 				
					}
				formatter= new SimpleDateFormat("dd-MM-yyyy 'u' HH:mm:ss");  
				date = new Date(System.currentTimeMillis());  
				time = formatter.format(date); 
				connection.setText("U훾itano! " + time);
				fos = new FileOutputStream("HNBresponse.ser");
				oos = new ObjectOutputStream(fos);
				oos.writeObject(response);
				oos.close();
				fos.close();
				sr.close();
				in.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		} else {
			connectionOK = false;
			try {
				refresh.setDisable(true);
				fis = new FileInputStream("HNBresponse.ser");
				ois = new ObjectInputStream(fis);
				response = (StringBuilder) ois.readObject();
				ois.close();
				fis.close();
				connection.setText("Nema interneta! U훾itani su stari podaci!");
			} catch (IOException | ClassNotFoundException ioe) {
				ioe.printStackTrace();
			}
		}
		return response;
	}

	public void setup(StringBuilder response) throws JSONException {
		arr = new JSONArray(response.toString());
		for (int i = 0; i < arr.length(); i++) {
			valuta = arr.getJSONObject(i).getString("Valuta");
			vrijednost = Double.parseDouble(arr.getJSONObject(i).getString("Srednji za devize").replaceFirst(",", "."));
			jedinica = Double.parseDouble(arr.getJSONObject(i).getString("Jedinica"));
			valuteKV.put(valuta, vrijednost);
			jediniceKV.put(valuta, jedinica);
		}
		valuteKV.put("KN", 1.);
		jediniceKV.put("KN", 1.);
		ObservableList<String> list = FXCollections.observableArrayList(valuteKV.keySet());
		comboOne.setItems(list);
		comboTwo.setItems(list);
		comboOne.setPromptText("-odaberi-");
		comboTwo.setPromptText("-odaberi-");
		lista.setEditable(false);
		lista.setWrapText(true);
		lista.setText(valuteKV.toString().replace("{", "").replace("}", ""));
		textField.setText("0");
	}

	public void buttonClickHandler(ActionEvent evt) throws IOException {
		clickedButton = (Button) evt.getTarget();
		buttonLabel = clickedButton.getText();
		try {
			if("R".equals(buttonLabel)) {
				status.setText("");
				setup(connection());
			}
			if ("Prera훾unaj".equals(buttonLabel)) {
				if(!connectionOK) {
					setup(connection());
				}
				textValue = textField.getText();
				if ("0".equals(textValue) || "".equals(textValue)) {
					status.setText("Unesite iznos za konverziju!");
				} else {
					if (comboOne.getValue() == null || comboTwo.getValue() == null) {
						status.setText("Odaberite valutu!");
					} else {// ------------------------------------------izra훾un----
						jedinica1 = jediniceKV.get(comboOne.getValue());
						jedinica2 = jediniceKV.get(comboTwo.getValue());
						doubleValue = Double.parseDouble(textValue);
						df = new DecimalFormat("#0.00");
						sum = (valuteKV.get(comboOne.getValue()) / jedinica1) * doubleValue;
						finishSum = sum / (valuteKV.get(comboTwo.getValue()) / jedinica2);
						formated = (df.format(finishSum));
						status.setText("-->     " + textValue + " " + comboOne.getValue() + " = "
								+ formated + " " + comboTwo.getValue());
					}
				}
			}
		} catch (NullPointerException | JSONException e) {
			status.setText("Ne radi :(");
		}
	}
}
